{
  "react-template": {
    "prefix": "xxx-react",
    "body": [
      "import {  } from 'react';",
      "",
      "const ${1:Page} = () => {",
      "  return <div>${1:Page}</div>;",
      "};",
      "",
      "export default ${1:Page};",
      ""
    ],
    "description": "react-template"
  },
  "react-component-template": {
    "prefix": "xxx-react-component",
    "body": [
      "import { memo } from 'react';",
      "",
      "const ${1:Com} = () => {",
      "  return <div>${1:Com}</div>;",
      "};",
      "",
      "export default memo(${1:Com});",
      ""
    ],
    "description": "react-component-template"
  },
  "react-taro-template": {
    "prefix": "xxx-react-taro",
    "body": [
      "import { View, Text } from '@tarojs/components';",
      "import { useLoad, navigateTo } from '@tarojs/taro';",
      "",
      "const ${1:Page} = () => {",
      "  useLoad(() => {",
      "    console.log('${1:Page} loaded.');",
      "  });",
      "",
      "  return <View>${1:Page}</View>;",
      "};",
      "",
      "export default ${1:Page};",
      ""
    ],
    "description": "react-taro-template"
  },
  "useQuery-template": {
    "prefix": "xxx-query",
    "body": [
      "export const use${1:Name} = () => {",
      "  return useQuery({",
      "    queryKey: ['${2:/url}'],",
      "    queryFn: async () => {",
      "      const { data } = await axios.${3:get}('${2:/url}');",
      "",
      "      return data;",
      "    },",
      "  });",
      "};",
      ""
    ],
    "description": "useQuery-template"
  },
  "useMutation-template": {
    "prefix": "xxx-mutation",
    "body": [
      "export const use${1:Name} = () => {",
      "  return useMutation({",
      "    mutationFn: async (params: any) => {",
      "      await axios.${3:post}('${2:/url}', params, {",
      "        headers: {",
      "          ...SUCCESS_IS_TOAST,",
      "        },",
      "      });",
      "    },",
      "  });",
      "};"
    ],
    "description": "useMutation-template"
  },
  "react-page": {
    "prefix": " xxx-page",
    "body": [
      "import {} from 'react';",
      "",
      "import WrapPageContainer from '@/components/WrapPageContainer';",
      "import WrapCard from '@/components/WrapCard';",
      "import WrapEC from '@/components/WrapEC';",
      "import { Button, Col, Form, Input, Row, Table } from 'antd';",
      "import { Tips, ModalBtn, LeftRightBtns } from '@hbwow/components';",
      "",
      "import { FIELD, SEARCH_COL_SPAN, SEARCH_ROW_GUTTER } from '@/utils/constants';",
      "import { showTotal } from '@/utils/common';",
      "import { useSearchAndTable } from '@hbwow/hooks';",
      "import { useQuery } from '@tanstack/react-query';",
      "",
      "/******** 复制后需删除 **********/",
      "const useTemplate = () => {",
      "  return useQuery({});",
      "};",
      "/******** 复制后需删除 **********/",
      "",
      "const Page = () => {",
      "  const [form] = Form.useForm();",
      "",
      "  const columns = [",
      "    {",
      "      title: 'xxx',",
      "      dataIndex: 'x',",
      "    },",
      "    {",
      "      title: 'xxx',",
      "      dataIndex: 'x',",
      "    },",
      "    {",
      "      title: 'xxx',",
      "      dataIndex: 'x',",
      "      render: () => {",
      "        return <Tips tips='xxxxxxxx' icon='xxxx' />;",
      "      },",
      "    },",
      "    {",
      "      title: 'xxx',",
      "      dataIndex: 'x',",
      "      render: () => {",
      "        return <Tips />;",
      "      },",
      "    },",
      "    {",
      "      title: '操作',",
      "      width: 180,",
      "      render: () => {",
      "        return (",
      "          <>",
      "            <Button type='link'>编辑</Button>",
      "            <ModalBtn>删除</ModalBtn>",
      "          </>",
      "        );",
      "      },",
      "    },",
      "  ];",
      "",
      "  //条件分页查询",
      "  const {",
      "    tableProps,",
      "    paginationProps,",
      "    defaultSearchFormValues,",
      "    // queryReturn,",
      "    onreset,",
      "    onChangeSearchFormValues,",
      "  } = useSearchAndTable({",
      "    reactQuery: useTemplate,",
      "    ...FIELD,",
      "    form: form,",
      "    columns: columns,",
      "    defaultSearchFormValues: { xx: undefined },",
      "    formatParams: (formValues: any) => {",
      "      return formValues;",
      "    },",
      "  });",
      "",
      "  const handleSearch = async () => {",
      "    const result = await form.validateFields();",
      "",
      "    onChangeSearchFormValues(result);",
      "  };",
      "",
      "  return (",
      "    <WrapPageContainer",
      "      header={{",
      "        breadcrumb: {",
      "          items: [",
      "            {",
      "              path: '',",
      "              title: 'xxx',",
      "            },",
      "            {",
      "              path: '',",
      "              title: 'xxxxxx',",
      "            },",
      "          ],",
      "        },",
      "      }}",
      "    >",
      "      <WrapCard wrapClassName='mb-12'>",
      "        <WrapEC isEc={false} btnsMoveDown onSearch={handleSearch} onReset={onreset}>",
      "          <Form form={form} initialValues={defaultSearchFormValues}>",
      "            <Row gutter={SEARCH_ROW_GUTTER}>",
      "              <Col span={SEARCH_COL_SPAN}>",
      "                <Form.Item name='xx' label='xxx'>",
      "                  <Input placeholder='请输入' />",
      "                </Form.Item>",
      "              </Col>",
      "            </Row>",
      "          </Form>",
      "        </WrapEC>",
      "      </WrapCard>",
      "",
      "      <WrapCard>",
      "        <LeftRightBtns",
      "          className='mb-8'",
      "          rightBtns={[",
      "            {",
      "              children: '新增',",
      "              type: 'primary',",
      "            },",
      "          ]}",
      "        />",
      "",
      "        <Table",
      "          {...tableProps}",
      "          // /******** 复制后需删除 **********/",
      "          dataSource={[...new Array(5)]}",
      "          // /******** 复制后需删除 **********/",
      "          pagination={{",
      "            ...paginationProps,",
      "            showTotal: showTotal,",
      "          }}",
      "        />",
      "      </WrapCard>",
      "    </WrapPageContainer>",
      "  );",
      "};",
      "",
      "export default Page;"
    ],
    "description": "react-page"
  },
  "react-cu-modal": {
    "prefix": "xxx-cu-modal",
    "body": [
      "import { Form, Modal, ModalProps, Input } from 'antd';",
      "import { CustomSuspense } from '@hbwow/components';",
      "",
      "import { DEFAULT_MODAL_FORM__VALUE, DEFAULT_MODAL_VALUE } from '@/utils/constants';",
      "import { useGetRules } from '@hbwow/validate-antd';",
      "import { useMutation, useQuery } from '@tanstack/react-query';",
      "",
      "interface IProps extends ModalProps {",
      "  id?: number | string;",
      "  onSuccessCallback?: () => void;",
      "}",
      "",
      "/******** 复制后需删除 **********/",
      "const useGetDataById = () => useQuery({});",
      "const useSaveData = () => useMutation({});",
      "const useUpdateData = () => useMutation({});",
      "/******** 复制后需删除 **********/",
      "",
      "const XxCU = ({ id, onSuccessCallback, ...rest }: IProps) => {",
      "  const { getRules } = useGetRules();",
      "  const [form] = Form.useForm();",
      "  const isEdit = !!id;",
      "",
      "  const { data: dataById, isFetching: isFetchingGetDataById } = useGetDataById(id, {",
      "    onSuccess: (res) => {",
      "      form.setFieldsValue({ ...res });",
      "    },",
      "  });",
      "  const { mutate: mutateSave, isLoading: isLoadingSave } = useSaveData();",
      "  const { mutate: mutateUpdate, isLoading: isLoadingUpdate } = useUpdateData();",
      "",
      "  const handleOk = async () => {",
      "    const result = await form.validateFields();",
      "",
      "    if (isEdit) {",
      "      mutateUpdate(",
      "        { id: dataById.id, ...result },",
      "        {",
      "          onSuccess: () => {",
      "            onSuccessCallback?.();",
      "          },",
      "        },",
      "      );",
      "",
      "      return;",
      "    }",
      "",
      "    mutateSave(",
      "      { ...result },",
      "      {",
      "        onSuccess: () => {",
      "          onSuccessCallback?.();",
      "        },",
      "      },",
      "    );",
      "  };",
      "",
      "  return (",
      "    <Modal",
      "      {...DEFAULT_MODAL_VALUE}",
      "      title={isEdit ? '编辑' : '新增'}",
      "      onOk={handleOk}",
      "      confirmLoading={isLoadingSave || isLoadingUpdate}",
      "      {...rest}",
      "    >",
      "      <CustomSuspense isFetching={isFetchingGetDataById}>",
      "        <Form {...DEFAULT_MODAL_FORM__VALUE} form={form}>",
      "          <Form.Item label='xxx' name='xxx' rules={[...getRules({ name: 'isEmpty' })]}>",
      "            <Input placeholder='请输入' />",
      "          </Form.Item>",
      "        </Form>",
      "      </CustomSuspense>",
      "    </Modal>",
      "  );",
      "};",
      "",
      "export default XxCU;",
      "",
      "/******** 复制后需删除（外部调用） **********/",
      "// const defaultOpenInfo = { open: false, id: '' };",
      "// const [openInfo, setOpenInfo] = useState({ ...defaultOpenInfo });",
      "",
      "// const handleCancel = () => {",
      "//   setOpenInfo({ ...defaultOpenInfo });",
      "// };",
      "",
      "// <XxCU",
      "//   open={openInfo.open}",
      "//   id={openInfo.id}",
      "//   onCancel={handleCancel}",
      "//   onSuccessCallback={() => {",
      "//     handleCancel();",
      "//     // queryReturn.refetch();",
      "//   }}",
      "// />;",
      "/******** 复制后需删除（外部调用） **********/"
    ],
    "description": "react-cu-modal"
  },
  "react-cu-page": {
    "prefix": "xxx-cu-page",
    "body": [
      "import { useNavigate } from 'react-router-dom';",
      "",
      "import { Button, Col, Form, Input, Row } from 'antd';",
      "import { CustomSuspense } from '@hbwow/components';",
      "import WrapPageContainer from '@/components/WrapPageContainer';",
      "import WrapCard from '@/components/WrapCard';",
      "",
      "import { DEFAULT_MODAL_FORM__VALUE } from '@/utils/constants';",
      "import { useGetRules } from '@hbwow/validate-antd';",
      "import { useMutation, useQuery } from '@tanstack/react-query';",
      "",
      "interface IProps {",
      "  id?: number | string;",
      "  onSuccessCallback?: () => void;",
      "}",
      "",
      "/******** 复制后需删除 **********/",
      "const useGetDataById = () => useQuery({});",
      "const useSaveData = () => useMutation({});",
      "const useUpdateData = () => useMutation({});",
      "/******** 复制后需删除 **********/",
      "",
      "const XxCU = ({ id, onSuccessCallback }: IProps) => {",
      "  const navigate = useNavigate();",
      "  const { getRules } = useGetRules();",
      "  const [form] = Form.useForm();",
      "  const isEdit = !!id;",
      "",
      "  const { data: dataById, isFetching: isFetchingGetDataById } = useGetDataById(id, {",
      "    onSuccess: (res) => {",
      "      form.setFieldsValue({ ...res });",
      "    },",
      "  });",
      "  const { mutate: mutateSave, isLoading: isLoadingSave } = useSaveData();",
      "  const { mutate: mutateUpdate, isLoading: isLoadingUpdate } = useUpdateData();",
      "",
      "  const handleOk = async () => {",
      "    const result = await form.validateFields();",
      "",
      "    if (isEdit) {",
      "      mutateUpdate(",
      "        { id: dataById.id, ...result },",
      "        {",
      "          onSuccess: () => {",
      "            onSuccessCallback?.();",
      "          },",
      "        },",
      "      );",
      "",
      "      return;",
      "    }",
      "",
      "    mutateSave(",
      "      { ...result },",
      "      {",
      "        onSuccess: () => {",
      "          onSuccessCallback?.();",
      "        },",
      "      },",
      "    );",
      "  };",
      "",
      "  return (",
      "    <WrapPageContainer",
      "      title={isEdit ? '航班数据-编辑' : '航班数据-新增'}",
      "      header={{",
      "        onBack: () => {",
      "          navigate(-1);",
      "        },",
      "        breadcrumb: {",
      "          items: [",
      "            {",
      "              path: '',",
      "              title: '航班业务管理数据',",
      "            },",
      "            {",
      "              path: '',",
      "              title: isEdit ? '航班数据-编辑' : '航班数据-新增',",
      "            },",
      "          ],",
      "        },",
      "      }}",
      "    >",
      "      <CustomSuspense isFetching={isFetchingGetDataById}>",
      "        <WrapCard wrapClassName='mb-12'>",
      "          <Form {...DEFAULT_MODAL_FORM__VALUE} form={form}>",
      "            <Row gutter={8}>",
      "              <Col span={8}>",
      "                <Form.Item label='xxx' name='xxx' rules={[...getRules({ name: 'isEmpty' })]}>",
      "                  <Input placeholder='请输入' />",
      "                </Form.Item>",
      "              </Col>",
      "            </Row>",
      "          </Form>",
      "        </WrapCard>",
      "",
      "        <WrapCard className='flex justify-end'>",
      "          <Button",
      "            className='mr-8'",
      "            onClick={() => {",
      "              navigate(-1);",
      "            }}",
      "          >",
      "            取消",
      "          </Button>",
      "          <Button type='primary' loading={isLoadingSave || isLoadingUpdate} onClick={handleOk}>",
      "            保存",
      "          </Button>",
      "        </WrapCard>",
      "      </CustomSuspense>",
      "    </WrapPageContainer>",
      "  );",
      "};",
      "",
      "export default XxCU;",
      ""
    ],
    "description": "react-cu-page"
  }
}
